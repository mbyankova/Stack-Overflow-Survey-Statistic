for(s in split){
s = trimws(s, which = c("both", "left", "right"))
print(s)
if(!is.na(s)  & s == "Developer"){
Developer[i] = TRUE
}
}
}
warnings()
for(i in seq_along(ident[1:20])) {
split = strsplit(ident[i], ";")
for(s in split){
s = trimws(s, which = c("both", "left", "right"))
print(s)
if(s == "Developer"){
Developer[i] = TRUE
}
}
}
for(i in seq_along(ident[1:20])) {
split = strsplit(ident[i], ";")
for(s in split){
s = trimws(s, which = c("both", "left", "right"))
print(s)
if(!is.na(s)  & s == "Developer"){
Developer[i] = TRUE
}
}
}
split = strsplit(ident[2], ";")
for(s in split){
s = trimws(s, which = c("both", "left", "right"))
print(s)
if(!is.na(s)  & s == "Programmer"){
Programmer[i] = TRUE
print(Yes)
}
}
?split
split(ident[2], ";")
split = list(strsplit(ident[2], ";"))
split
fun <- function(s) {}
fun <- function(s) { s = trimws(s, which = c("both", "left", "right"))
print(s)
if(!is.na(s)  & s == "Programmer"){
Programmer[i] = TRUE
print(Yes)
}}
split = strsplit(ident[2], ";")
lapply(split, fun)
for(i in seq_along(ident[1:20])) {
split = strsplit(ident[i], ";")
for(s in split){
s = trimws(s, which = c("both", "left", "right"))
print(s)
if(!is.na(s)  | s == "Programmer"){
Programmer[i] = TRUE
print(Yes)
}
}
}
for(i in seq_along(ident[1:20])) {
split = strsplit(ident[i], ";")
for(s in split){
s = trimws(s, which = c("both", "left", "right"))
print(s)
if(!is.na(s)  | s == "Programmer"){
Programmer[i] = TRUE
print('Yes')
}
}
}
for(i in seq_along(ident[1:20])) {
split = strsplit(ident[i], ";")
for(s in split){
s = trimws(s, which = c("both", "left", "right"))
print(s)
if(!is.na(s)){
print("No")
}
else if(s == "Programmer"){
Programmer[i] = TRUE
print('Yes')
}
}
}
for(i in seq_along(ident[1:20])) {
split = strsplit(ident[i], ";")
for(s in split){
s = trimws(s, which = c("both", "left", "right"))
print(s)
if(!is.na(s) | s == "Programmer"){
Programmer[i] = TRUE
print('Yes')
}
}
}
for(i in seq_along(ident[1:20])) {
split = strsplit(ident[i], ";")
for(s in split){
s = trimws(s, which = c("both", "left", "right"))
print(s)
if(is.na(s)){
return
}
if(s == "Developer"){
Developer[i] = TRUE
}
}
}
for(i in seq_along(ident[1:20])) {
split = strsplit(ident[i], ";")
for(s in split){
s = trimws(s, which = c("both", "left", "right"))
print(s)
if(is.na(s)){
return()
}
if(s == "Developer"){
Developer[i] = TRUE
}
}
}
for(i in seq_along(ident[1:20])) {
split = strsplit(ident[i], ";")
for(s in split){
s = trimws(s, which = c("both", "left", "right"))
print(s)
if(is.na(s)){
return
}
if(s == "Developer"){
Developer[i] = TRUE
}
}
}
for(i in seq_along(ident[1:20])) {
split = strsplit(ident[i], ";")
for(s in split){
s = trimws(s, which = c("both", "left", "right"))
print(s)
if(!is.na(s) && s == "Developer"){
Developer[i] = TRUE
}
}
}
for(i in seq_along(ident[1:20])) {
split = strsplit(ident[i], ";")
for(s in split){
s = trimws(s, which = c("both", "left", "right"))
print(s)
if(!is.na(s) && s == "Programmer"){
Programmer[i] = TRUE
}
}
}
Programmer[1:20]
for(i in seq_along(ident[1:20])) {
split = strsplit(ident[i], ";")
for(s in split){
s = trimws(s, which = c("both", "left", "right"))
print(s)
if(!is.na(s) & s == "Programmer"){
Programmer[i] = TRUE
}
}
}
Programmer[1:20]
Programmer = rep(FALSE, 56030)
for(i in seq_along(ident[1:20])) {
split = strsplit(ident[i], ";")
for(s in split){
s = trimws(s, which = c("both", "left", "right"))
print(s)
if(!is.na(s) && s == "Programmer"){
Programmer[i] = TRUE
}
}
}
Programmer[1:20]
split = strsplit(ident[2], ";")
split
split[1]
split(split)
splited = strsplit(ident[2], ";")
split(splited)
splited[1:2]
splited[[1]
]
splited[[1]]
splited[[2]]
for(s in splited) {print(s)}
substr(sptited, 1, 2)
substr(splited, 1, 2)
substr(splited, 1, 10)
strsplit(splited, " ")
split(splited)
?split
sptited[[[2]]]
sptited[[2]]
sptited[[1]]
sptited[[1]][2]
splited[1][2]
splited[1][1]
splited[1][2]
ident[2]
splited
unlist(splited)
s =unlist(splited)
s[2]
for(i in seq_along(ident[1:20])) {
split = strsplit(ident[i], ";")
split = unlist(split)
for(s in split){
s = trimws(s, which = c("both", "left", "right"))
print(s)
if(!is.na(s) && s == "Programmer"){
Programmer[i] = TRUE
}
}
}
Programmer[1:20]
Programmer = rep(FALSE, 56030)
Developer = rep(FALSE, 56030)
Engineer = rep(FALSE, 56030)
Sr. Developer
= rep(FALSE, 56030)
Sr. Developer = rep(FALSE, 56030)
Sr.Developer = rep(FALSE, 56030)
Full-StackDeveloper = rep(FALSE, 56030)
FullStackDeveloper = rep(FALSE, 56030)
Other = rep(FALSE, 56030)
Hacker = rep(FALSE, 56030)
Expert = rep(FALSE, 56030)
Ninja = rep(FALSE, 56030)
Manager = rep(FALSE, 56030)
Rockstar = rep(FALSE, 56030)
Guru = rep(FALSE, 56030)
FullStackOverflowDeveloper = rep(FALSE, 56030)
for(i in seq_along(ident)) {
split = strsplit(ident[i], ";")
split = unlist(split)
for(s in split){
s = trimws(s, which = c("both", "left", "right"))
print(s)
if(!is.na(s) && s == "Programmer"){
Programmer[i] = TRUE
}
if(!is.na(s) && s == "Developer"){
Developer[i] = TRUE
}
if(!is.na(s) && s == "Engineer"){
Developer[i] = TRUE
}
if(!is.na(s) && s == "Sr. Developer"){
Developer[i] = TRUE
}
if(!is.na(s) && s == "Full-Stack Developer"){
Developer[i] = TRUE
}
if(!is.na(s) && s == "Other"){
Developer[i] = TRUE
}
if(!is.na(s) && s == "Hacker"){
Developer[i] = TRUE
}
if(!is.na(s) && s == "Expert"){
Developer[i] = TRUE
}
if(!is.na(s) && s == "Ninja"){
Developer[i] = TRUE
}
if(!is.na(s) && s == "Manager"){
Developer[i] = TRUE
}
if(!is.na(s) && s == "Rockstar"){
Developer[i] = TRUE
}
if(!is.na(s) && s == "Guru"){
Developer[i] = TRUE
}
if(!is.na(s) && s == "Full-Stack Overflow Developer"){
Developer[i] = TRUE
}
}
}
for(i in seq_along(ident)) {
split = strsplit(ident[i], ";")
split = unlist(split)
for(s in split){
s = trimws(s, which = c("both", "left", "right"))
if(!is.na(s) && s == "Programmer"){
Programmer[i] = TRUE
}
if(!is.na(s) && s == "Developer"){
Developer[i] = TRUE
}
if(!is.na(s) && s == "Engineer"){
Developer[i] = TRUE
}
if(!is.na(s) && s == "Sr. Developer"){
Developer[i] = TRUE
}
if(!is.na(s) && s == "Full-Stack Developer"){
Developer[i] = TRUE
}
if(!is.na(s) && s == "Other"){
Developer[i] = TRUE
}
if(!is.na(s) && s == "Hacker"){
Developer[i] = TRUE
}
if(!is.na(s) && s == "Expert"){
Developer[i] = TRUE
}
if(!is.na(s) && s == "Ninja"){
Developer[i] = TRUE
}
if(!is.na(s) && s == "Manager"){
Developer[i] = TRUE
}
if(!is.na(s) && s == "Rockstar"){
Developer[i] = TRUE
}
if(!is.na(s) && s == "Guru"){
Developer[i] = TRUE
}
if(!is.na(s) && s == "Full-Stack Overflow Developer"){
Developer[i] = TRUE
}
}
}
for(i in seq_along(ident)) {
split = strsplit(ident[i], ";")
split = unlist(split)
for(s in split){
s = trimws(s, which = c("both", "left", "right"))
if(!is.na(s) && s == "Programmer"){
Programmer[i] = TRUE
}
if(!is.na(s) && s == "Developer"){
Developer[i] = TRUE
}
if(!is.na(s) && s == "Engineer"){
Engineer[i] = TRUE
}
if(!is.na(s) && s == "Sr. Developer"){
Sr.Developer[i] = TRUE
}
if(!is.na(s) && s == "Full-Stack Developer"){
FullStackDeveloper[i] = TRUE
}
if(!is.na(s) && s == "Other"){
Other[i] = TRUE
}
if(!is.na(s) && s == "Hacker"){
Hacker[i] = TRUE
}
if(!is.na(s) && s == "Expert"){
Expert[i] = TRUE
}
if(!is.na(s) && s == "Ninja"){
Ninja[i] = TRUE
}
if(!is.na(s) && s == "Manager"){
Manager[i] = TRUE
}
if(!is.na(s) && s == "Rockstar"){
Rockstar[i] = TRUE
}
if(!is.na(s) && s == "Guru"){
Guru[i] = TRUE
}
if(!is.na(s) && s == "Full-Stack Overflow Developer"){
FullStackOverflowDeveloper[i] = TRUE
}
}
}
count(Developer)
library(plyr)
count(Developer)
count(Developer$x == TRUE)
de
Developer
Developer = rep(FALSE, 56030)
for(i in seq_along(ident)) {
split = strsplit(ident[i], ";")
split = unlist(split)
for(s in split){
s = trimws(s, which = c("both", "left", "right"))
if(!is.na(s) && s == "Developer"){
Developer[i] = TRUE
}
}}
count(Developer$x == TRUE)
count(Developer)
Developer$x
count(Developer)$x
Developer
Developer[TRUE]
count(Developer)
count(Developer)$x == TRUE
count(Developer)$freq
count(Developer)$freq[2]
count(Developer)$freq[2]/56030
namesOfId = c("Developer", "Programmer", "Engineer", "Sr. Developer", "Full-Stack Developer", "Other","Hacker", "Expert", "Ninja", "Manager", "Rockstar","Guru", "Full-Stack Overflow Developer")
propOfId = c(count(Developer)$freq[2]/56030, count(Programmer)$freq[2]/56030,)
propOfId = c(count(Developer)$freq[2]/56030, count(Programmer)$freq[2]/56030,
count(Engineer)$freq[2]/56030, count(Sr.Developer)$freq[2]/56030, count(FullStackDeveloper)$freq[2]/56030, count(Other)$freq[2]/56030, count(Hacker)$freq[2]/56030, count(Ninja)$freq[2]/56030, count(Manager)$freq[2]/56030,count(Rockstar)$freq[2]/56030, count(Guru)$freq[2]/56030, count(FullStackOverflowDeveloper)$freq[2]/56030
)
propOfId
count(Programmer)$freq[2]/56030
count(Programmer)
FullStackOverflowDeveloper
count(FullStackOverflowDeveloper)
FullStackDeveloper
count(FullStackDeveloper)
Programmer
for(i in seq_along(ident)) {
split = strsplit(ident[i], ";")
split = unlist(split)
for(s in split){
s = trimws(s, which = c("both", "left", "right"))
if(is.na(s)){
Other[i] = TRUE
}
if(!is.na(s) && s == "Programmer"){
Programmer[i] = TRUE
}
if(!is.na(s) && s == "Engineer"){
Engineer[i] = TRUE
}
if(!is.na(s) && s == "Full-stack Developer"){
FullStackDeveloper[i] = TRUE
}
if(!is.na(s) && s == "Full Stack Overflow Developer"){
FullStackOverflowDeveloper[i] = TRUE
}
}
}
count(Engineer)$freq[2]/56030, count(Sr.Developer)$freq[2]/56030, count(FullStackDeveloper)$freq[2]/56030, count(Other)$freq[2]/56030, count(Hacker)$freq[2]/56030, count(Ninja)$freq[2]/56030, count(Manager)$freq[2]/56030,count(Rockstar)$freq[2]/56030, count(Guru)$freq[2]/56030, count(FullStackOverflowDeveloper)$freq[2]/56030)
propOfId = c(count(Developer)$freq[2]/56030, count(Programmer)$freq[2]/56030,
+ count(Engineer)$freq[2]/56030, count(Sr.Developer)$freq[2]/56030, count(FullStackDeveloper)$freq[2]/56030, count(Other)$freq[2]/56030, count(Hacker)$freq[2]/56030, count(Ninja)$freq[2]/56030, count(Manager)$freq[2]/56030,count(Rockstar)$freq[2]/56030, count(Guru)$freq[2]/56030, count(FullStackOverflowDeveloper)$freq[2]/56030
+ )
propOfId = c(count(Developer)$freq[2]/56030, count(Programmer)$freq[2]/56030,
count(Engineer)$freq[2]/56030, count(Sr.Developer)$freq[2]/56030, count(FullStackDeveloper)$freq[2]/56030, count(Other)$freq[2]/56030, count(Hacker)$freq[2]/56030, count(Ninja)$freq[2]/56030, count(Manager)$freq[2]/56030,count(Rockstar)$freq[2]/56030, count(Guru)$freq[2]/56030, count(FullStackOverflowDeveloper)$freq[2]/56030)
propOfId
namesOfId
ident
table(namesOfId, propOfId)
propOfId
length(propOfId)
Expert
namesOfId
propOfId = c(count(Developer)$freq[2]/56030, count(Programmer)$freq[2]/56030,
count(Engineer)$freq[2]/56030, count(Sr.Developer)$freq[2]/56030, count(FullStackDeveloper)$freq[2]/56030, count(Other)$freq[2]/56030, count(Hacker)$freq[2]/56030, count(Expert)$freq[2]/56030, count(Ninja)$freq[2]/56030, count(Manager)$freq[2]/56030,count(Rockstar)$freq[2]/56030, count(Guru)$freq[2]/56030, count(FullStackOverflowDeveloper)$freq[2]/56030)
propOfId
table(namesOfId, propOfId)
data.frame(namesOfId, propOfId)
ID_df = data.frame(namesOfId, propOfId)
Id_df_sorted = ID_df[with(ID_df, order(propOfId))]
Id_df_sorted = ID_df[with(ID_df, order("propOfId"))]
Id_df_sorted
Id_df_sorted = ID_df[with(ID_df, order("propOfId")), ]
Id_df_sorted
Id_df_sorted = ID_df[with(ID_df, order(-names, "propOfId")), ]
Id_df_sorted = ID_df[with(ID_df, order(-namesOfId, "propOfId")), ]
Id_df_sorted = ID_df[with(ID_df, order(-"namesOfId", "propOfId")), ]
ID_df
View(ID_df)
View(ID_df)
Id_df_sorted = ID_df[with(ID_df, order("propOfId")), ]
Id_df_sorted
Id_df_sorted = ID_df[order(ID_df$propOfId), ]
Id_df_sorted
Id_df_sorted = ID_df[order(ID_df$propOfId), decreasing =TRUE ,]
Id_df_sorted = ID_df[order(ID_df$propOfId, decreasing =TRUE) ,]
Id_df_sorted
plot(Id_df_sorted)
barplot(Id_df_sorted$propOfId, names.arg = Id_df_sorted$namesOfId)
barplot(Id_df_sorted$propOfId, names.arg = Id_df_sorted$namesOfId, cex.names = 0.7, horiz = TRUE, las=2, xlim = c(0, 1),beside = TRUE, col = c("red"))
Id_df_sorted = ID_df[order(ID_df$propOfId), ]
barplot(Id_df_sorted$propOfId, names.arg = Id_df_sorted$namesOfId, cex.names = 0.7, horiz = TRUE, las=2, xlim = c(0, 1),beside = TRUE, col = c("red"))
barplot(Id_df_sorted$propOfId, names.arg = Id_df_sorted$namesOfId, cex.names = 0.7, horiz, las=2, xlim = c(0, 1),beside = TRUE, col = c("red"))
barplot(Id_df_sorted$propOfId, names.arg = Id_df_sorted$namesOfId, cex.names = 0.7, las=2, xlim = c(0, 1),beside = TRUE, col = c("red"))
barplot(Id_df_sorted$propOfId, names.arg = Id_df_sorted$namesOfId, cex.names = 0.7, las=2, ylim = c(0, 1),beside = TRUE, col = c("red"))
Id_df_sorted = ID_df[order(ID_df$propOfId, decreasing =TRUE) ,]
barplot(Id_df_sorted$propOfId, names.arg = Id_df_sorted$namesOfId, cex.names = 0.7, las=2, ylim = c(0, 1),beside = TRUE, col = c("red"))
par(mar=c(2, 14 ,4.1 ,2.1))
barplot(Id_df_sorted$propOfId, names.arg = Id_df_sorted$namesOfId, cex.names = 0.7, las=2, ylim = c(0, 1),beside = TRUE, col = c("red"))
par(mar=c(5.1, 4.1, 4.1, 2.1))
barplot(Id_df_sorted$propOfId, names.arg = Id_df_sorted$namesOfId, cex.names = 0.7, las=2, ylim = c(0, 1),beside = TRUE, col = c("red"))
par(mar=c(5.1, 4.1, 5.1, 2.1))
barplot(Id_df_sorted$propOfId, names.arg = Id_df_sorted$namesOfId, cex.names = 0.7, las=2, ylim = c(0, 1),beside = TRUE, col = c("red"))
par(mar=c(5.1, 4.1, 3.1, 2.1))
barplot(Id_df_sorted$propOfId, names.arg = Id_df_sorted$namesOfId, cex.names = 0.7, las=2, ylim = c(0, 1),beside = TRUE, col = c("red"))
par(mar=c(5.1, 6.1, 3.1, 2.1))
barplot(Id_df_sorted$propOfId, names.arg = Id_df_sorted$namesOfId, cex.names = 0.7, las=2, ylim = c(0, 1),beside = TRUE, col = c("red"))
par(mar=c(5.1, 4.1, 3.1, 4.1))
barplot(Id_df_sorted$propOfId, names.arg = Id_df_sorted$namesOfId, cex.names = 0.7, las=2, ylim = c(0, 1),beside = TRUE, col = c("red"))
par(mar=c(5.1, 4.1, 3.1, 6.1))
barplot(Id_df_sorted$propOfId, names.arg = Id_df_sorted$namesOfId, cex.names = 0.7, las=2, ylim = c(0, 1),beside = TRUE, col = c("red"))
par(mar=c(7.1, 4.1, 3.1, 2.1))
barplot(Id_df_sorted$propOfId, names.arg = Id_df_sorted$namesOfId, cex.names = 0.7, las=2, ylim = c(0, 1),beside = TRUE, col = c("red"))
par(mar=c(8.1, 4.1, 3.1, 2.1))
barplot(Id_df_sorted$propOfId, names.arg = Id_df_sorted$namesOfId, cex.names = 0.7, las=2, ylim = c(0, 0.8),beside = TRUE, col = c("red"))
par(mar=c(9.1, 4.1, 3.1, 2.1))
barplot(Id_df_sorted$propOfId, names.arg = Id_df_sorted$namesOfId, cex.names = 0.7, las=2, ylim = c(0, 0.8),beside = TRUE, col = c("red"))
barplot(Id_df_sorted$propOfId, names.arg = Id_df_sorted$namesOfId, cex.names = 0.7, las=2, ylim = c(0, 0.8),beside = TRUE, col = c("#3CB371"))
save.image("~/R/Stack-Overflow-Survey-Statistic/env_new.RData")
savehistory("~/R/Stack-Overflow-Survey-Statistic/hist_new.Rhistory")
